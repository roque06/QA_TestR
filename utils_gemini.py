import streamlit as st
import requests
import certifi
import re
import csv
import io
import csv
import io
import os
import argparse
import streamlit as st
import pandas as pd
import time

from debug_fallback import modo_recuperacion_debug


def prompt_generar_escenarios_profesionales(descripcion_refinada):
    return {
        "contents": [
            {
                "parts": [
                    {
                        "text": (
                            "Eres un Analista QA Senior experto en dise√±o de pruebas funcionales para sistemas empresariales.\n\n"
                            "A partir de la siguiente descripci√≥n funcional, genera una tabla en formato **CSV puro**, SIN explicaciones, SIN encabezados adicionales, y SIN comentarios externos.\n\n"
                            "La tabla debe tener exactamente las siguientes columnas:\n"
                            "Title,Preconditions,Steps,Expected Result,Type,Priority\n\n"
                            "üéØ INSTRUCCIONES ESTRICTAS:\n"
                            "- NO escribas texto adicional fuera del CSV.\n"
                            "- NO incluyas cabeceras como 'Escenarios sugeridos:' ni bloques explicativos.\n"
                            "- En 'Preconditions', escribe condiciones reales, no uses 'Ninguna'. Ejemplos:\n"
                            "    ‚Ä¢ Usuario con sesi√≥n iniciada\n"
                            "    ‚Ä¢ Cliente registrado con movimientos\n"
                            "    ‚Ä¢ Navegador abierto con filtros activos\n"
                            "- En 'Steps', usa numeraci√≥n clara: 1. 2. 3. (separadas por punto y espacio)\n"
                            "- Si alguna celda contiene comas, encierra su contenido entre comillas dobles (\"\").\n"
                            "- Usa solo estos valores en 'Type': Funcional, Validaci√≥n, Seguridad, Usabilidad\n"
                            "- Usa solo estos valores en 'Priority': Alta, Media, Baja\n"
                            "- Todos los escenarios deben ser espec√≠ficos, profesionales y relacionados directamente con la descripci√≥n.\n"
                            "- Genera entre **8 y 12 escenarios distintos**, que incluyan:\n"
                            "    ‚Ä¢ 1 escenario exitoso (Happy Path)\n"
                            "    ‚Ä¢ 4-6 escenarios negativos (errores, entradas inv√°lidas, omisiones)\n"
                            "    ‚Ä¢ 1-2 de Seguridad o Edge Cases\n"
                            "    ‚Ä¢ 1-2 de Usabilidad o persistencia\n\n"
                            f"üìÑ Descripci√≥n funcional:\n{descripcion_refinada}"
                        )
                    }
                ]
            }
        ]
    }






def prompt_sugerencias_mejora(texto_funcional):
    return {
        "contents": [
            {
                "parts": [
                    {
                        "text": (
                            "Act√∫a como Analista QA Senior.\n"
                            "Analiza el siguiente texto funcional y genera entre 5 y 10 sugerencias claras para mejorarlo, "
                            "enfoc√°ndote en facilitar la generaci√≥n de escenarios de prueba automatizados.\n\n"
                            "üéØ Las sugerencias deben centrarse en:\n"
                            "- Claridad y especificidad t√©cnica\n"
                            "- Inclusi√≥n de validaciones de campos\n"
                            "- Casos l√≠mite o alternativos\n"
                            "- Precondiciones expl√≠citas del sistema o del usuario\n"
                            "- Mejorar la redacci√≥n hacia comportamiento verificable\n\n"
                            f"üìÑ Texto funcional:\n{texto_funcional}"
                        )
                    }
                ]
            }
        ]
    }


def generar_sugerencias_con_gemini(texto_funcional):
    prompt = prompt_sugerencias_mejora(texto_funcional)
    respuesta = enviar_a_gemini(prompt)
    texto_sugerencias = extraer_texto_de_respuesta_gemini(respuesta)

    # Separar por l√≠neas o vi√±etas
    sugerencias = [
        linea.strip("‚Ä¢-1234567890. ") for linea in texto_sugerencias.strip().split("\n")
        if len(linea.strip()) > 5
    ]

    return sugerencias



def respuesta_es_valida(respuesta_json: dict) -> bool:
    """
    Verifica si la respuesta de Gemini contiene la estructura esperada.
    """
    return (
        isinstance(respuesta_json, dict)
        and "candidates" in respuesta_json
        and len(respuesta_json["candidates"]) > 0
        and "content" in respuesta_json["candidates"][0]
        and "parts" in respuesta_json["candidates"][0]["content"]
    )



def extraer_texto_de_respuesta_gemini(respuesta_json: dict) -> str:
    """
    Extrae texto plano desde respuesta Gemini JSON.
    Remueve bloques markdown y limpia espacios innecesarios.
    """
    try:
        texto = respuesta_json['candidates'][0]['content']['parts'][0]['text']

        # Quitar bloques Markdown ```csv ```
        if '```csv' in texto:
            texto = texto.split('```csv')[1]
        if '```' in texto:
            texto = texto.split('```')[0]

        # Limpiar l√≠neas vac√≠as y espacios extras
        lineas = [line.strip() for line in texto.strip().splitlines() if line.strip()]
        return "\n".join(lineas)

    except (KeyError, IndexError, TypeError) as e:
        raise ValueError(f"‚ùå No se pudo extraer texto de Gemini: {e}")

def generar_prompt_csv_robusto(texto_funcional):
    prompt = f"""
Act√∫a como un analista de QA experto.

Genera 3 escenarios de prueba funcionales en formato CSV, usando exactamente estas columnas:
Title,Preconditions,Steps,Expected Result,Type,Priority

‚ö†Ô∏è Instrucciones estrictas:
- No expliques nada.
- No uses formato Markdown.
- Usa comas como separadores.
- Cada l√≠nea debe tener contenido realista, t√©cnico y profesional.
- Sin encabezados duplicados. Solo la tabla.

Texto funcional:
\"\"\"{texto_funcional}\"\"\"
    """.strip()
    return prompt


def validar_respuesta_gemini(texto_csv, columnas_esperadas=6):
    lineas = texto_csv.strip().split("\n")
    casos_validos = []

    for i, linea in enumerate(lineas):
        partes = [p.strip() for p in linea.split(",")]
        if len(partes) == columnas_esperadas and all(partes):
            casos_validos.append(linea)

    return casos_validos


def invocar_con_reintento(prompt, max_intentos=3, espera_inicial=2):
    from utils_gemini import llamar_a_gemini
    import time

    for intento in range(1, max_intentos + 1):
        try:
            resultado = llamar_a_gemini(prompt)
            if isinstance(resultado, tuple):
                resultado = resultado[0]
            return resultado
        except ValueError as e:
            if "503" in str(e) and intento < max_intentos:
                time.sleep(espera_inicial * intento)
            else:
                raise


def activar_modo_recuperacion(respuesta_cruda, columnas_esperadas=6):
    st.error("‚ùå Gemini respondi√≥, pero no gener√≥ escenarios v√°lidos con los campos requeridos.")
    st.text_area("üìÑ Respuesta cruda de Gemini", respuesta_cruda, height=300)
    return modo_recuperacion_debug(respuesta_cruda, columnas_esperadas=columnas_esperadas)


def enviar_a_gemini(prompt_dict, max_intentos=4, espera_inicial=2):

    API_KEY = st.secrets["gemini_api_key"]
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

    headers = {
        "Content-Type": "application/json",
        "X-goog-api-key": API_KEY
    }

    intentos = 0
    while intentos < max_intentos:
        try:
            response = requests.post(url, headers=headers, json=prompt_dict)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.HTTPError as e:
            if response.status_code == 503:
                # Si es 503, espera un momento y reintenta
                espera = espera_inicial * (intentos + 1)
                st.warning(f"‚ö†Ô∏è Gemini est√° saturado (503). Reintentando en {espera} segundos... (Intento {intentos+1}/{max_intentos})")
                time.sleep(espera)
                intentos += 1
            else:
                # Otros errores HTTP, se lanza inmediatamente
                raise ValueError(f"‚ùå Error HTTP al invocar Gemini: {e}")
        except Exception as e:
            raise ValueError(f"‚ùå Error general al invocar Gemini: {e}")

    # Si fallaron todos los intentos
    raise ValueError("‚ùå Gemini no respondi√≥ tras varios intentos (503 repetidos).")


def prompt_refinar_descripcion(texto_funcional):
    return {
        "contents": [{
            "parts": [{
                "text": (
                    "Eres un analista experto en QA. Debes reestructurar claramente la siguiente descripci√≥n funcional "
                    "en formato t√©cnico y profesional, prepar√°ndola para que luego se generen escenarios de prueba. "
                    "Obligatoriamente incluye estas tres secciones claramente separadas y completas:\n\n"
                    "- M√≥dulo: (Nombre breve del m√≥dulo o componente involucrado)\n"
                    "- Funci√≥n: (Acci√≥n principal que permite esta funcionalidad)\n"
                    "- Detalle t√©cnico del comportamiento esperado: (Breve pero clara descripci√≥n t√©cnica de c√≥mo deber√≠a funcionar exactamente la funcionalidad)\n\n"
                    "üìå Ejemplo claro:\n"
                    "- M√≥dulo: Registro de usuarios\n"
                    "- Funci√≥n: Permitir que usuarios nuevos se registren\n"
                    "- Detalle t√©cnico del comportamiento esperado: El formulario validar√° campos obligatorios como usuario, correo y contrase√±a. Se mostrar√° un mensaje de √©xito al completar correctamente el registro y mensajes espec√≠ficos en caso de error en cualquier validaci√≥n.\n\n"
                    f"‚ö†Ô∏è Ahora reestructura profesionalmente el siguiente texto:\n\n{texto_funcional}"
                )
            }]
        }]
    }

def obtener_descripcion_refinada(texto_funcional, max_intentos=3):
    intentos = 0
    while intentos < max_intentos:
        respuesta_estructurada = enviar_a_gemini(prompt_refinar_descripcion(texto_funcional))
        descripcion_refinada = extraer_texto_de_respuesta_gemini(respuesta_estructurada).strip()

        if descripcion_refinada:
            return descripcion_refinada

        intentos += 1
        time.sleep(1)  # peque√±o retardo antes de reintentar

    # si llega aqu√≠, todos los intentos fallaron
    raise ValueError("‚ö†Ô∏è Gemini no devolvi√≥ descripci√≥n v√°lida tras varios intentos.")